package com.example.component_demo1.http;import android.os.Looper;import android.text.TextUtils;import com.example.base_fun.http.LibHttpCallback;import com.example.base_fun.http.LibHttpService;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSocketFactory;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.HashMap;import java.util.concurrent.TimeUnit;/** * Created by banketree * on 2018/12/18. * <p> * 优速宝接口 4.0 */public abstract class UcbService extends LibHttpService {    public boolean isMainThread() {        return Looper.getMainLooper().getThread() == Thread.currentThread();    }    @Override    protected abstract String getUrl();    @Override    protected abstract Class<? extends Object> getService();    @Override    protected OkHttpClient getOkHttpClient() {        X509TrustManager trustManager;        SSLSocketFactory sslSocketFactory;        try {            trustManager = new UnSafeTrustManager();            SSLContext sslContext = SSLContext.getInstance("TLS");            sslContext.init(null, new TrustManager[]{trustManager}, null);            sslSocketFactory = sslContext.getSocketFactory();        } catch (GeneralSecurityException e) {            throw new RuntimeException(e);        }        httpClient = new OkHttpClient()                .newBuilder()                .retryOnConnectionFailure(false)                .sslSocketFactory(sslSocketFactory, trustManager)                .hostnameVerifier(new UnSafeHostnameVerifier())                .connectTimeout(60, TimeUnit.SECONDS)                .readTimeout(60, TimeUnit.SECONDS)                .writeTimeout(60, TimeUnit.SECONDS)                .addInterceptor(new Interceptor() {                    @Override                    public okhttp3.Response intercept(Chain chain) throws IOException {                        return okhttpInterceptor(chain);                    }                })                .addNetworkInterceptor(new Interceptor() {                    @Override                    public okhttp3.Response intercept(Chain chain) throws IOException {                        okhttp3.Response response = okhttpInterceptor(chain);                        return response.newBuilder()                                .removeHeader("Pragma")                                .removeHeader("Cache-Control")                                .build();                    }                })                .cache(null)                .build();        return httpClient;    }    public void doNetByGson(String svceName, HashMap<String, String> hashMap) {        doNet(LibHttpCallback.Companion.getTypeGson(), svceName, hashMap);    }    public void doNetByGson(String svceName, HashMap<String, String> hashMap, HttpCallback callback) {        doNet(LibHttpCallback.Companion.getTypeGson(), svceName, hashMap, callback);    }    public void doNetByXml(String svceName, HashMap<String, String> hashMap) {        doNet(LibHttpCallback.Companion.getTypeXml(), svceName, hashMap);    }    public void doNetByXml(String svceName, HashMap<String, String> hashMap, HttpCallback callback) {        doNet(LibHttpCallback.Companion.getTypeXml(), svceName, hashMap, callback);    }    public void doNet(String svceName, HashMap<String, String> hashMap) {        doNet(LibHttpCallback.Companion.getTypeString(), svceName, hashMap);    }    public void doNet(String svceName, HashMap<String, String> hashMap, HttpCallback callback) {        doNet(LibHttpCallback.Companion.getTypeString(), svceName, hashMap, callback);    }    public void doNet(int doType, String svceName, HashMap<String, String> hashMap) {        doNet(doType, svceName, hashMap, new HttpCallback() {        });    }    public void doNet(int doType, String svceName, HashMap<String, String> hashMap, HttpCallback callback) {        if (TextUtils.isEmpty(callback.getServiceName()))            callback.setServiceName(svceName); //接口名--》路径反应//        if (callback.canShowProgress() && isMainThread())//需要主线程//            callback.showProgressDialog();        try {            if (doType == LibHttpCallback.Companion.getTypeString()) {                if (callback.isAsyn()) asynNetString(hashMap, callback);                else synNetString(hashMap, callback);            } else if (doType == LibHttpCallback.Companion.getTypeGson()) {                if (callback.isAsyn()) asynNetGson(hashMap, callback);                else synNetGson(hashMap, callback);            } else if (doType == LibHttpCallback.Companion.getTypeXml()) {                if (callback.isAsyn()) asynNetXml(hashMap, callback);                else synNetXml(hashMap, callback);            }        }//        catch (UceError e) {//            callback.onFaile(e);//        }        catch (Exception e) {            callback.onFaile(e);        }    }    protected okhttp3.Response okhttpInterceptor(Interceptor.Chain chain) throws IOException {        Request.Builder builder = chain.request()                .newBuilder()                .removeHeader("Content-Type")                .addHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");        Request request = builder.build();        return chain.proceed(request);    }}